\ wordkey-graph.fs

REQUIRE ffl/hct.fs
REQUIRE group-dictionary.fs
REQUIRE wordkey.fs

25000 CONSTANT WORDKEY-GRAPH-SIZE
WORDKEY-GRAPH-SIZE HCT-CREATE WORDKEY-GRAPH

: ADD-START-WORD ( add,l -- )
    0 -ROT WORDKEY-GRAPH HCT-INSERT ;

: PREDECESSOR@>S ( add,l,dest -- )
    -ROT WORDKEY-GRAPH HCT-GET
    0= IF S" unknown word" EXCEPTION THROW THEN
    SWAP WORDKEY>S ;

: ADD-ADJACENT-WORDS ( add,l,add,l -- )
    2SWAP S>WORDKEY -ROT WORDKEY-GRAPH HCT-INSERT ;

: .WORD-PATH ( add,l -- )
    BEGIN
        2DUP TYPE SPACE
        PAD PREDECESSOR@>S
        PAD COUNT DUP
    WHILE
    REPEAT 2DROP ;

QUEUE VISIT-QUEUE

: CLEAR-VISIT-QUEUE ( -- )
    VISIT-QUEUE Q-EMPTY ; 
    
: ADD-TO-VISIT ( add,l -- )
    S>WORDKEY VISIT-QUEUE Q-APPEND ;

CREATE SOURCE-S CELL ALLOT
CREATE GROUP-S CELL ALLOT
CREATE LETTERS-S 100 ALLOT
CREATE ADJACENT-S CELL ALLOT

: SOURCE-WORD ( kw -- add,l )
    SOURCE-S DUP -ROT
    WORDKEY>S COUNT ;

: TH-GROUP-LETTERS ( ad,l,i -- add,l )
    GROUP-S S>GROUP
    GROUP-S COUNT GROUP-LETTERS
    LETTERS-S LETTER-SET>S
    LETTERS-S COUNT ;

: LETTER-ADJACENT-WORD ( c -- add,l )
    GROUP-S COUNT ROT
    ADJACENT-S GROUP-CHAR>S
    ADJACENT-S COUNT ;

: ADD-ADJACENT-WORD ( pred,l,srce,l -- )
    2OVER 2OVER COMPARE IF 
        ADD-ADJACENT-WORDS 
        ADJACENT-S COUNT 
        S>WORDKEY VISIT-QUEUE Q-APPEND
    ELSE
        2DROP 2DROP
    THEN ;

: SEARCH-ADJACENT-WORDS! ( -- )
    VISIT-QUEUE Q-POP SOURCE-WORD 
    DUP 0 ?DO
        2DUP I TH-GROUP-LETTERS
        OVER + SWAP ?DO
            I C@ LETTER-ADJACENT-WORD
            SOURCE-S COUNT 2SWAP
            ADD-ADJACENT-WORD
    LOOP LOOP 2DROP ;
